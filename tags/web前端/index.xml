<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WEB前端 on Vocanic myBlogger</title>
    <link>https://zc6666.top/tags/web%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in WEB前端 on Vocanic myBlogger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2011-2020 Fabian Tamp</copyright>
    <lastBuildDate>Sun, 22 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zc6666.top/tags/web%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深拷贝与浅拷贝详解</title>
      <link>https://zc6666.top/post/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>十分钟从0到1掌握深浅拷贝 引入 在做算法题或者在写业务时，难免会碰到二维数组的创建和使用。在刚学习JS的时候，笔者使用二维数组就遇到了百思不得其解的问题 刚学习JS时我是这样做的
const arr = new Array(3).fill(new Array(3).fill(0))console.log(arr)RUN  function rundata(){//获取输入框内的数据const text = document.getElementById(&#39;inputdata&#39;).value;// 先清空iframelet iframe = document.getElementById(&#34;iframe1&#34;).contentWindow.document.body.innerText = &#34;&#34;;//将输入框内的数据传给iframeiframe = document.getElementById(&#39;iframe1&#39;).contentDocument.write(text);}在上述操作中，我创建了一个3x3的二维数组</description>
    </item>
    
    <item>
      <title>React导学课3</title>
      <link>https://zc6666.top/post/react%E5%AF%BC%E5%AD%A6%E8%AF%BE3/</link>
      <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/react%E5%AF%BC%E5%AD%A6%E8%AF%BE3/</guid>
      <description>useReducer(reducer, initialArg, init?)  参数 返回值 注意事项 规范 避免对初始状态进行直接计算 useContext()和useReducer()组合代替Redux来管理状态    useReducer(reducer, initialArg, init?) useReducer在组件的顶层调用以使用reducer管理state。
import { useReducer } from &amp;#39;react&amp;#39;; function reducer(state, action) { // ... } function MyComponent() { const [state, dispatch] = useReducer(reducer, { age: 42 }); // ... 参数  reducer: 指定状态如何更新的 reducer 函数。纯函数，应该将状态和动作作为参数，并且应该返回下一个状态。state和action可以是任何类型。 initialArg: 计算初始状态的值。它可以是任何类型的值。如何从中计算初始状态取决于下一个init参数。 optional init : 指定如何计算初始状态的初始化函数。如果未指定，则初始状态设置为initialArg. 否则，初始状态设置为调用的结果init(initialArg)。  返回值 useReducer返回一个两个值的数组：
 当前state。在第一次渲染期间，它被设置为init(initialArg)or initialArg（如果没有init）。 dispatch函数，将状态更新为不同的值并触发重新渲染。  注意事项  useReducer是一个 Hook，所以你只能在组件的顶层或自己的 Hooks 中调用。不能在循环或条件中调用它。如果需要，请提取一个新组件并将状态移动到其中。 在严格模式下，React 会调用你的 reducer 和 initializer 两次，以保证结果正确。这是仅限开发的行为，不会影响生产。所以这对我们的 reducer 和 initializer 提出了要求，即必须是纯函数，这样的话就不影响你的组件的逻辑。如果函数不纯，即两次获得的返回值不同的话，就会在两个值中二选一，忽略其中一个调用的结果，这往往是我们不想看到的结果。  规范 switch (action.</description>
    </item>
    
    <item>
      <title>React导学课2</title>
      <link>https://zc6666.top/post/react%E5%AF%BC%E5%AD%A6%E8%AF%BE2/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/react%E5%AF%BC%E5%AD%A6%E8%AF%BE2/</guid>
      <description>React 导学课2 useContext（） 上下文hook，接受一个上下文对象，并返回当前上下文
创建上下文：
import { createContext } from &amp;#39;react&amp;#39;; const MyContext = createContext(&amp;#39;default&amp;#39;); //这里的值是最终的保底值，根据业务类型放个默认值 当前上下文的值由树中调用组件上方的value最近的 prop确定
&amp;lt;MyContext.Provider value = {???}&amp;gt; {/* 这里的value是想赋给上下文Provider标签域内的value */} &amp;lt;Component1 /&amp;gt; &amp;lt;Component2 /&amp;gt; &amp;lt;/MyContext.Provider&amp;gt; 当最近的MyContext.Provider组件更新时，此hook将触发更新并重新渲染，并将最近的上下文value传递给MyContex提供程序，重新渲染的话仍然会从组件本身开始使用useContext。
useContext里同时可以传入函数：
const [textContext, setTextContext] = useState(&amp;#39;123&amp;#39;) return ( &amp;lt;MyContext.Provider value={[textContext, setTextContext]}&amp;gt; {/* 此时Parent组件便可以使用useContext接收到两个参数：初始值（&amp;#39;123&amp;#39;）和函数setTextContext */} &amp;lt;Parent /&amp;gt; &amp;lt;/MyContext.Provider&amp;gt; ) useContext()总是在调用它的组件上方寻找最近的提供者。它向上搜索并且不考虑您从中调用的组件中的提供程序useContext()。
所以要小心你的provider是否嵌套，看一个demo试试
useRef（） const ref = useRef(initialValue) useRef在组件的顶层调用以声明一个或多个refs。
useRef返回一个具有单个属性的ref 对象，该属性最初设置为您提供的初始值。current
import { useRef } from &amp;#39;react&amp;#39;; function Stopwatch() { const intervalRef = useRef(0); // .</description>
    </item>
    
    <item>
      <title>React导学课1</title>
      <link>https://zc6666.top/post/react%E5%AF%BC%E5%AD%A6%E8%AF%BE/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/react%E5%AF%BC%E5%AD%A6%E8%AF%BE/</guid>
      <description>React 导学课 1. React的基本语法 1.1 函数式组件的创建方式 命名规则： React 组件名称必须始终以大写字母开头，而 HTML 标签必须小写
function Header(){ return ( &amp;lt; &amp;gt; &amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt; &amp;lt;/&amp;gt; ) } const Header = ()=&amp;gt;{ return ( &amp;lt; &amp;gt; &amp;lt;h1&amp;gt; Hello World!&amp;lt;/h1&amp;gt; &amp;lt;/ &amp;gt; ) } 其中用到了Jsx语法，啥是Jsx捏？HTML 语言直接写在 JavaScript 语言之中，不加任何引号，允许 HTML 与 JavaScript 的混写，换个角度就是关于标签的表达式（体会一下）
&amp;lt;div className=&amp;#34;sidebar&amp;#34; /&amp;gt; Jsx最重要的两点记住就会用：遇到 HTML 标签（以 &amp;lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析。
属性和方法在Jsx里用驼峰实现
onClick onKeyUp className placeHolder 1.2 组件嵌套 function Header(){ return ( &amp;lt; &amp;gt; &amp;lt;h1&amp;gt;Hello World!</description>
    </item>
    
    <item>
      <title>JS中的函数声明整体和变量声明提升</title>
      <link>https://zc6666.top/post/js%E9%A2%84%E7%BC%96%E8%AF%91/</link>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/js%E9%A2%84%E7%BC%96%E8%AF%91/</guid>
      <description>#JS中的变量声明提升和函数声明整体提升#
JS算是学习前端的小萌新们必须要走的一项难关，其中变量和函数提升是JS中很别具一格的特点。由于JS 的预编译特性，所以函数和变量的编译顺序发生了一丢丢和视图不一样的改变。下面让我们一起来学习一下：
首先记住一个宗旨：函数声明会整体提升；变量则是声明提升
一、先看变量的提升：
 1.当我们写一段如下的代码时：
 	var a = 3; document.write(a);   根据我们之前所学的知识，我们很容易知道会输出一个：
  	3  2.当代码删去对a的声明时，变成如下时候：
 	document.write(a);  我们会得到一个ERROR的结果
   上面两种情况都是很基础的内容：
 第一种因为上面对a有了定义声明并赋值，所以下面可以打印出来；
第二种因为之前没有对a的定义声明，所以出现了未定义的变量从而出现错误。
   3.下面让我们看第三种情况：
 	document.write(a);	var a = 3;  我们此时惊奇地发现:
   打印的操作并未出现错误，但是a的值也并未传到页面中。这又是为什么呢？
其实，是变量的声明发生了提升，你可以理解为，将a的定义提前了：
 	var a;document.write(a);a = 3; 进行了如上的操作。以上就是变量提升的说明啦！
 二、函数声明整体提升：
 我们可以看到：虽然我们的函数在执行语句的后面，但是函数依旧被执行，并没有报错。
这是因为在HTML加载时，&amp;lt; script&amp;gt; 中的function(也就是我们的函数)，会被整体提升到开头先进行加载，加载完毕后，再进行其他语句(如执行语句)的进行。 以上就是我对函数声明整体提升和变量声明提升的解释说明了。</description>
    </item>
    
    <item>
      <title>使用jQuery的animate()制作自定义动画</title>
      <link>https://zc6666.top/post/jquery-%E7%9A%84animate%E5%8A%A9%E4%BD%A0%E5%81%9A%E5%87%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/jquery-%E7%9A%84animate%E5%8A%A9%E4%BD%A0%E5%81%9A%E5%87%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E7%94%BB/</guid>
      <description>用animate()函数做动画效果 值得提起注意的是，这篇博客其实是为了充字数，给那些前端新手写的，所以大佬们请先移步去看别的article
 前言引入
animate()函数在我看来，实质上是对JS进行CSS修改操作的简化，animate()支持所有css属性的修改。机制是：
由当前的CSS属性变化到你animate()内规定的属性。
  然后接下来就是关于使用的介绍了：
 $(selector).animate({params},speed,callback)
params 参数定义形成动画的 CSS 属性,即你想实现的修改后的CSS属性
speed(可填可不填) 参数规定效果的时长。它可以取以下值：&amp;ldquo;slow&amp;rdquo;、&amp;ldquo;fast&amp;rdquo; 或毫秒。
callback(可填可不填) 参数是动画完成后所执行的函数名称。
   举个实例:
 效果演示 $(document).ready(function(){$(&#34;button#bDemo&#34;).click(function(){$(&#34;div#divDemo&#34;).animate({left:&#34;120px&#34;,opacity:&#34;0.5&#34;},&#34;slow&#34;);$(&#34;div#divDemo&#34;).animate({fontSize:&#34;5em&#34;},&#34;slow&#34;);});});开始动画
vocanic&amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;效果演示&amp;lt;/h3&amp;gt;&amp;lt;br&amp;gt;&amp;lt;script src=&amp;quot;jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt; $(document).ready(function(){$(&amp;quot;button#bDemo&amp;quot;).click(function(){$(&amp;quot;div#divDemo&amp;quot;).animate({left:&amp;quot;170px&amp;quot;,opacity:&amp;quot;0.5&amp;quot;},&amp;quot;slow&amp;quot;);$(&amp;quot;div#divDemo&amp;quot;).animate({fontSize:&amp;quot;5em&amp;quot;},&amp;quot;slow&amp;quot;);});});&amp;lt;/script&amp;gt;&amp;lt;button id=&amp;quot;bDemo&amp;quot;&amp;gt;开始动画&amp;lt;/button&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;div id=&amp;quot;divDemo&amp;quot; style=&amp;quot;background:#98bf21;height:100px;width:210px;position:relative;&amp;quot;&amp;gt;vocanic&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;  值得注意的是:animate()函数可以先后顺序使用，从而造成更加神奇的视觉效果。
这种先后顺序又被称作为队列
还有就是jQuery库的show()，hide()和toggle()也是被支持放入animate({})内的
  </description>
    </item>
    
    <item>
      <title>正则的归纳</title>
      <link>https://zc6666.top/post/%E4%B8%BB%E8%A7%82/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/%E4%B8%BB%E8%A7%82/</guid>
      <description>1.如何理解富国才能强兵，强兵才能强国？ 强国往往是经济和军事共同作用的结果。 经济建设是国防建设的基本依托，只有国家经济实力增强了，国防建设才能有更大发展。国防建设是我国现代化建设的战略任务，只有把国防建设搞上去了，经济建设才能有更加坚强的安全保障。 国防实力要同经济实力相匹配，必须在国家总体战略中统一富国和强军两大目标、统筹发展和安全两件大事、统合经济和国防两种实力，把国防和军队建设有机融入经济社会发展大体系，逐步实现国家各领域战略布局一体融合、战略资源一体整合、战略力量一体运用。 2.如何加快构建怎样的生态文明体系？ 加快建立健全以生态价值观念为准则的生态文化体系，以产业生态化和生态产业化为主体的生态经济体系，以改善生态环境质量为核心的目标责任体系，以治理体系和治理能力现代化为保障的生态文明制度体系，以生态系统良性循环和环境风险有效防控为重点的生态安全体系。 3.我国现代化的特征有哪些？ 中国的现代化，是人口规模巨大的现代化，是全体人民共同富裕的现代化，是物质文明和精神文明相协调的现代化，是人与自然和谐共生的现代化，是走和平发展道路的现代化。 中国式现代化是社会主义现代化，是独具特色、有别于资本主义的现代化。西方资本主义现代化是建立在对外殖民血腥掠夺、对内残酷剥削人民的原始积累基础上的。中国式现代化打破了只有遵循资本主义现代化模式才能实现现代化的神话，克服了资本主义现代化所固有的弊端，提供了现代化的全新选择，展现了人类社会现代化的光明前景。 4.怎样坚持适应把握引领经济发展新常态？ 我国经济发展进入新常态，要推动经济高质量发展，建设现代化经济体系；研判经济形势要立足大局，看清长期趋势，把握经济规律。进入新发展阶段，要贯彻新发展理念，构建新发展格局；要坚持正确政绩观，不简单以生产总值增长率论英雄，不被短期经济指标的波动所左右。 5.应当怎样坚持走中国特色国家安全道路？ 坚持统筹发展和安全两件大事；坚持人民安全、政治安全、国家利益至上有机统一；坚持维护和塑造国家安全；坚持科学统筹的根本方法；坚持党对国家安全工作的绝对领导。 6.应当怎样准确把握“一国”和“两制”的关系？ “一国两制”最早是为解决台湾问题而提出，但最先在香港及澳门实行。“一国两制”是一个完整的概念。即国家主体坚持实行社会主义制度，个别地区依法实行资本主义制度。“一国”是实行“两制”的前提和基础，“两制”从属和派生于“一国”，并统一于“一国”之内。“一国两制”的提出是为了实现和维护国家统一。在“一国”的基础之上，“两制”的关系应该也完全可以做到和谐相处、相互促进。既把实行社会主义制度的内地建设好，也把实行资本主义制度的香港、澳门建设好。只有这样，才能把路走对、走稳。 7.如何坚定文化自信，繁荣社会主义文化？ 实现中华民族伟大复兴，迫切要求我国由一个文化大国转变成为一个文化强国。中华优秀传统文化、革命文化和社会主义先进文化构成我们文化自信的三大源泉。坚持马克思主义在意识形态领域指导地位的根本制度。大力培育和践行社会主义核心价值观。提升公共文化服务水平。健全现代文化产业体系。提高国家文化软实力。弘扬中国传统文化；注重国家形象塑造，提高国际传播影响力。 8.习近平外交思想的核心要义有哪些？ 坚持以维护党中央权威为统领加强党对对外工作的集中统一领导 坚持以实现中华民族伟大复兴为使命推进中国特色大国外交 坚持以维护世界和平、促进共同发展为宗旨推动构建人类命运共同体 坚持以中国特色社会主义为根本增强战略自信 坚持以共商共建共享为原则推动“一带一路”建设 坚持以相互尊重、合作共赢为基础走和平发展道路 坚持以深化外交布局为依托打造全球伙伴关系 坚持以公平正义为理念引领全球治理体系改革 坚持以国家核心利益为底线维护国家主权、安全、发展利益 坚持以对外工作优良传统和时代特征相结合为方向塑造中国外交独特风范。
9.为什么要坚持走中国特色社会主义法治道路？ 走中国特色社会主义法治道路，是历史的必然结论。走中国特色社会主义法治道路，是由我国社会主义国家性质所决定的。走中国特色社会主义法治道路，是立足我国基本国情的必然选择。中国特色社会主义法治道路的核心要义，就是坚持党的领导，坚持中国特色社会主义制度，贯彻中国特色社会主义法治理论，这充分体现了我国社会主义性质，具有鲜明的中国特色、实践特色、时代特色。 10.习近平生态文明主要包括哪些重要内容？ 第一，坚持人与自然和谐共生； 第二，绿水青山就是金山银山； 第三，良好生态环境是最普惠的民生福祉； 第四，统筹山水林田湖草沙系统治理； 第五，用最严格制度最严密法治保护生态环境；第六，共谋全球生态文明建设。</description>
    </item>
    
    <item>
      <title>正则表达式的总结</title>
      <link>https://zc6666.top/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
      <description>基础语法
 /正则表达式主体/修饰符(可选)
 常见的正则情况
 (?![0-9]+$) 这句意思是设定后面不能为纯数字
(?![a-z]+$) 这句意思是设定后面不能为纯小写字母
(?![0-9a-z]+$) 不能为小写字母与数字
(?![0-9A-Z]+$) 不能为大写字母与数字
(?![0-9a-zA-Z]+$) 不能为大写，小写字母与数字
 实例
 必须包含数字、英文字母、特殊符号且大于等于8位
特殊符号包括: ~!@#$%^&amp;amp;*
*正则表达式如下:*
&amp;lt;/^(?=.*\d)(?=.*[a-zA-Z])(?=.*[~!@#$%^&amp;amp;*])[\da-zA-Z~!@#$%^&amp;amp;*]{8,}$/&amp;gt; 
(?=.**[a-z]+$) 在字符某一位置存在a-z的字符
{8.16}$ 规定密码长度在8-16位
 之前改上网认证正则写过一个实例
 function pswTest() { //对密码强度进行验证，大小写字母，特殊字符，数字，四选三，在8位数以上var psw = document.getElementsByName(&amp;quot;password&amp;quot;)[0].value; var testPassword = /^(?![a-zA-Z]+$)(?![A-Z0-9]+$)(?![A-Z\W_]+$)(?![a-z0-9]+$)(?![a-z\W_]+$)(?![0-9\W_]+$)[a-zA-Z0-9\W_]{8,}$/; if (testPassword.test(psw) === false){ alert(&amp;quot;修改密码后再尝试登录&amp;quot;); return false; }else return true; //函数返回的是一个布尔值，需要在JS主体对返回值进行判断 //然后进行相关操作}    正则看起来很乱，但其实还是有规律可循的。
最重要的还是在写代码之前把自己的逻辑理清楚，核心思想就是排列组合的穷举方法，把该判断的情况都列出来。
最后加上一些主体函数的操作就能实现正则的验证。</description>
    </item>
    
  </channel>
</rss>
