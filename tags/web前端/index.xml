<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WEB前端 on vocanic myBlogger</title>
    <link>https://aub123.github.io/vocanic/tags/web%E5%89%8D%E7%AB%AF/</link>
    <description>Recent content in WEB前端 on vocanic myBlogger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2011-2020 Fabian Tamp</copyright>
    <lastBuildDate>Thu, 15 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://aub123.github.io/vocanic/tags/web%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用jQuery的animate()制作自定义动画</title>
      <link>https://aub123.github.io/vocanic/post/jquery-%E7%9A%84animate%E5%8A%A9%E4%BD%A0%E5%81%9A%E5%87%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://aub123.github.io/vocanic/post/jquery-%E7%9A%84animate%E5%8A%A9%E4%BD%A0%E5%81%9A%E5%87%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E7%94%BB/</guid>
      <description>#用animate()函数做动画效果# 值得提起注意的是，这篇博客其实是为了充字数，给那些前端新手写的，所以大佬们请先移步去看别的article
 前言引入
animate()函数在我看来，实质上是对JS进行CSS修改操作的简化，animate()支持所有css属性的修改。机制是：
由当前的CSS属性变化到你animate()内规定的属性。
  然后接下来就是关于使用的介绍了：
 $(selector).animate({params},speed,callback)
params 参数定义形成动画的 CSS 属性,即你想实现的修改后的CSS属性
speed(可填可不填) 参数规定效果的时长。它可以取以下值：&amp;ldquo;slow&amp;rdquo;、&amp;ldquo;fast&amp;rdquo; 或毫秒。
callback(可填可不填) 参数是动画完成后所执行的函数名称。
   举个实例:
 效果演示 $(document).ready(function(){$(&#34;button#bDemo&#34;).click(function(){$(&#34;div#divDemo&#34;).animate({left:&#34;170px&#34;,opacity:&#34;0.5&#34;},&#34;slow&#34;);$(&#34;div#divDemo&#34;).animate({fontSize:&#34;5em&#34;},&#34;slow&#34;);});});开始动画
vocanic``````效果演示 $(document).ready(function(){$(&#34;button#bDemo&#34;).click(function(){$(&#34;div#divDemo&#34;).animate({left:&#34;170px&#34;,opacity:&#34;0.5&#34;},&#34;slow&#34;);$(&#34;div#divDemo&#34;).animate({fontSize:&#34;5em&#34;},&#34;slow&#34;);});});开始动画
vocanic``````值得注意的是:animate()函数**可以先后顺序使用**，从而造成更加神奇的视觉效果。  这种先后顺序又被称作为**队列**  **还有就是jQuery库的show()，hide()和toggle()也是被支持放入animate({})内的**</description>
    </item>
    
    <item>
      <title>正则表达式的总结</title>
      <link>https://aub123.github.io/vocanic/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://aub123.github.io/vocanic/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
      <description>基础语法
 /正则表达式主体/修饰符(可选)
 常见的正则情况
 (?![0-9]+$) 这句意思是设定后面不能为纯数字
(?![a-z]+$) 这句意思是设定后面不能为纯小写字母
(?![0-9a-z]+$) 不能为小写字母与数字
(?![0-9A-Z]+$) 不能为大写字母与数字
(?![0-9a-zA-Z]+$) 不能为大写，小写字母与数字
 实例
 必须包含数字、英文字母、特殊符号且大于等于8位
特殊符号包括: ~!@#$%^&amp;amp;*
*正则表达式如下:*
&amp;lt;/^(?=.*\d)(?=.*[a-zA-Z])(?=.*[~!@#$%^&amp;amp;*])[\da-zA-Z~!@#$%^&amp;amp;*]{8,}$/&amp;gt; 
(?=.**[a-z]+$) 在字符某一位置存在a-z的字符
{8.16}$ 规定密码长度在8-16位
 之前改上网认证正则写过一个实例
 function pswTest() { //对密码强度进行验证，大小写字母，特殊字符，数字，四选三，在8位数以上var psw = document.getElementsByName(&amp;quot;password&amp;quot;)[0].value; var testPassword = /^(?![a-zA-Z]+$)(?![A-Z0-9]+$)(?![A-Z\W_]+$)(?![a-z0-9]+$)(?![a-z\W_]+$)(?![0-9\W_]+$)[a-zA-Z0-9\W_]{8,}$/; if (testPassword.test(psw) === false){ alert(&amp;quot;修改密码后再尝试登录&amp;quot;); return false; }else return true; //函数返回的是一个布尔值，需要在JS主体对返回值进行判断 //然后进行相关操作}    正则看起来很乱，但其实还是有规律可循的。
最重要的还是在写代码之前把自己的逻辑理清楚，核心思想就是排列组合的穷举方法，把该判断的情况都列出来。
最后加上一些主体函数的操作就能实现正则的验证。</description>
    </item>
    
  </channel>
</rss>
