<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法学习 on Vocanic myBlogger</title>
    <link>https://zc6666.top/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 算法学习 on Vocanic myBlogger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2011-2020 Fabian Tamp</copyright>
    <lastBuildDate>Fri, 21 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zc6666.top/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>题解1-两数之和</title>
      <link>https://zc6666.top/post/%E9%A2%98%E8%A7%A31-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/%E9%A2%98%E8%A7%A31-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>两数之和 题目： 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。
示例 1：
输入：nums = [2,7,11,15], target = 9输出：[0,1]解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。示例 2：
输入：nums = [3,2,4], target = 6输出：[1,2]示例 3：
输入：nums = [3,3], target = 6输出：[0,1]提示：
2 &amp;lt;= nums.length &amp;lt;= 104-109 &amp;lt;= nums[i] &amp;lt;= 109-109 &amp;lt;= target &amp;lt;= 109只会存在一个有效答案进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？ 解题思路： 运用for &amp;hellip; in &amp;hellip;循环遍历数组每个元素，用target-当前元素的值作为关键字去搜索是否在map中存在；如果没找到的话，把当前值和索引存入map，直至找到目标值or循环结束</description>
    </item>
    
    <item>
      <title>MIT算法导论合集</title>
      <link>https://zc6666.top/post/mit%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E5%90%88%E9%9B%86/</link>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/mit%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E5%90%88%E9%9B%86/</guid>
      <description>B站也有视频，也可以去我的b站账号看同款视频：
https://www.bilibili.com/video/BV1vL411J7Za
视频就放在下面了，需要的可以自己看:
01:
 02:
 03:
 04:
 05:
 06:
 07:
 08:
 09:
 10:
 11:
 12:
 13:
 14:
 15:
 16:
 17:
 18:
 19:
 20:
 21:
 22:
 23:
 24:
 </description>
    </item>
    
  </channel>
</rss>
