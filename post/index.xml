<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Vocanic myBlogger</title>
    <link>https://zc6666.top/post/</link>
    <description>Recent content in Posts on Vocanic myBlogger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2011-2020 Fabian Tamp</copyright>
    <lastBuildDate>Wed, 20 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://zc6666.top/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JS中的函数声明整体和变量声明提升</title>
      <link>https://zc6666.top/post/js%E9%A2%84%E7%BC%96%E8%AF%91/</link>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/js%E9%A2%84%E7%BC%96%E8%AF%91/</guid>
      <description>#JS中的变量声明提升和函数声明整体提升#
JS算是学习前端的小萌新们必须要走的一项难关，其中变量和函数提升是JS中很别具一格的特点。由于JS 的预编译特性，所以函数和变量的编译顺序发生了一丢丢和视图不一样的改变。下面让我们一起来学习一下：
首先记住一个宗旨：函数声明会整体提升；变量则是声明提升
一、先看变量的提升：
 1.当我们写一段如下的代码时：
 	var a = 3; document.write(&#39;a&#39;);   根据我们之前所学的知识，我们很容易知道会输出一个：
  	3  2.当代码删去对a的声明时，变成如下时候：
 	document.write(a);  我们会得到一个ERROR的结果
   上面两种情况都是很基础的内容：
 第一种因为上面对a有了定义声明并赋值，所以下面可以打印出来；
第二种因为之前没有对a的定义声明，所以出现了未定义的变量从而出现错误。
   3.下面让我们看第三种情况：
 	document.write(&#39;a&#39;);	var a = 3;  我们此时惊奇地发现:
   打印的操作并未出现错误，但是a的值也并未传到页面中。这又是为什么呢？
其实，是变量的声明发生了提升，你可以理解为，将a的定义提前了：
 	var a;document.write(&#39;a&#39;);a = 3; 进行了如上的操作。以上就是变量提升的说明啦！
 二、函数声明整体提升：
&amp;lt;img src=&amp;quot;../../images/JS预编译_函数提升.png width=100%&amp;gt;</description>
    </item>
    
    <item>
      <title>数据绪论笔记</title>
      <link>https://zc6666.top/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%AA%E8%AE%BA%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%AA%E8%AE%BA%E7%AC%94%E8%AE%B0/</guid>
      <description>数据绪论笔记 一、基本概念：
 1.数据： 描述事务的符号记录。可用文字、图形等多种形式表示，经数字化处理后可存入计算机。
2.数据库(DB): 按一定的数据模型组织、描述和存储在计算机内的、有组织的、可共享的数据集合。
3.数据库管理系统(DBMS): 位于用户和操作系统之间的一层数据管理软件。主要功能包括：
 数据定义功能：DBMS提供DDL,用户通过它定义数据对象。
数据操作功能：DBMS提供DML，用户通过它实现对数据库的查询、插入、删除和修改等操作。
数据库的运行管理：DBMS对数据库的建立、运用和维护进行统一管理、统一控制，以保证数据的安全性、完整性、并发控制及故障恢复。
数据库的建立和维护功能：数据库初始数据的输入、转换，数据库的转储、恢复、重新组织及性能监视与分析等。
   4.数据库系统(DBS)：计算机中引入数据库后的系统，包括
数据库DB
数据库管理系统DBMS
应用系统
数据库管理员DBA和用户
 二、DBMS的工作过程：
 1.应用层：
 应用层是DBMS与终端用户和应用程序的界面层，处理的对象是各种各样的数据库应用。
   2.语言翻译处理层:
 语言翻译处理层是对数据库语言的各类语句进行语法分析，视图转换、授权检查、完整性检查等。
   3.数据存储层：
 数据存储层处理的对象是单个元组，它将上层的集合操作转换为单记录操作。
   4.数据存储层：
 数据存储层处理的对象是数据页和系统缓存区。
   5.操作系统：
 操作系统是DBMS的基础。操作系统提供的存取原语和基本的存取方法通常是作为DBMS存储层的接口。
  </description>
    </item>
    
    <item>
      <title>9.22数据库课程设计</title>
      <link>https://zc6666.top/post/9.22%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/9.22%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/</guid>
      <description>#9.22数据库课程设计
一.课程要求
  概念结构设计和逻辑结构设计 SQL语言编程实现数据库建立应用和维护   二. 设计要求
  数据库课题选择 (不少于十个表)
2. 分析需求（系统调查，体验流程） 绘制 DFD DD图表及文字来说明   系统功能
数据字典
数据流程图
 需要存储什么数据，冗余的数据 是否需要存储
对数据进行 分类
    模型设计（难度适中,量化标准）功能数据分析 实现模型(的某一模块) 创建数据库脚本并提出文档 使用 POWERDESIGNER 和 DBMS   三.分数标准
  1/4学时按旷课处理 8能抄袭 文档中标明分工部分 完成情况   四.注意点
  着重于 分析 而不是实现 确定问题域(数据包含范围) 拎清楚数据的关系和必要性，删繁就简——不需要的数据不进行管理 需求分析，设计，管理逻辑分析，整个完整流程 交四个报告 和图和代码一起压缩打包   </description>
    </item>
    
    <item>
      <title>MIT算法导论合集</title>
      <link>https://zc6666.top/post/mit%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E5%90%88%E9%9B%86/</link>
      <pubDate>Sat, 21 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/mit%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E5%90%88%E9%9B%86/</guid>
      <description> B站也有视频，也可以去我的b站账号看同款视频：
https://www.bilibili.com/video/BV1vL411J7Za
视频就放在下面了，需要的可以自己看:
01:
 02:
 03:
 04:
 05:
 06:
 07:
 08:
 09:
 10:
 11:
 12:
 13:
 14:
 15:
 16:
 17:
 18:
 19:
 20:
 21:
 22:
 23:
 24:
 </description>
    </item>
    
    <item>
      <title>使用jQuery的animate()制作自定义动画</title>
      <link>https://zc6666.top/post/jquery-%E7%9A%84animate%E5%8A%A9%E4%BD%A0%E5%81%9A%E5%87%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E7%94%BB/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/jquery-%E7%9A%84animate%E5%8A%A9%E4%BD%A0%E5%81%9A%E5%87%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E7%94%BB/</guid>
      <description>用animate()函数做动画效果 值得提起注意的是，这篇博客其实是为了充字数，给那些前端新手写的，所以大佬们请先移步去看别的article
 前言引入
animate()函数在我看来，实质上是对JS进行CSS修改操作的简化，animate()支持所有css属性的修改。机制是：
由当前的CSS属性变化到你animate()内规定的属性。
  然后接下来就是关于使用的介绍了：
 $(selector).animate({params},speed,callback)
params 参数定义形成动画的 CSS 属性,即你想实现的修改后的CSS属性
speed(可填可不填) 参数规定效果的时长。它可以取以下值：&amp;ldquo;slow&amp;rdquo;、&amp;ldquo;fast&amp;rdquo; 或毫秒。
callback(可填可不填) 参数是动画完成后所执行的函数名称。
   举个实例:
 效果演示 $(document).ready(function(){$(&#34;button#bDemo&#34;).click(function(){$(&#34;div#divDemo&#34;).animate({left:&#34;170px&#34;,opacity:&#34;0.5&#34;},&#34;slow&#34;);$(&#34;div#divDemo&#34;).animate({fontSize:&#34;5em&#34;},&#34;slow&#34;);});});开始动画
vocanic&amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;效果演示&amp;lt;/h3&amp;gt;&amp;lt;br&amp;gt;&amp;lt;script src=&amp;quot;jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt; $(document).ready(function(){$(&amp;quot;button#bDemo&amp;quot;).click(function(){$(&amp;quot;div#divDemo&amp;quot;).animate({left:&amp;quot;170px&amp;quot;,opacity:&amp;quot;0.5&amp;quot;},&amp;quot;slow&amp;quot;);$(&amp;quot;div#divDemo&amp;quot;).animate({fontSize:&amp;quot;5em&amp;quot;},&amp;quot;slow&amp;quot;);});});&amp;lt;/script&amp;gt;&amp;lt;button id=&amp;quot;bDemo&amp;quot;&amp;gt;开始动画&amp;lt;/button&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;div id=&amp;quot;divDemo&amp;quot; style=&amp;quot;background:#98bf21;height:100px;width:210px;position:relative;&amp;quot;&amp;gt;vocanic&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;  值得注意的是:animate()函数可以先后顺序使用，从而造成更加神奇的视觉效果。
这种先后顺序又被称作为队列
还有就是jQuery库的show()，hide()和toggle()也是被支持放入animate({})内的
  </description>
    </item>
    
    <item>
      <title>实现用wordcloud&#43;jieba&#43;python制作中文词汇云图</title>
      <link>https://zc6666.top/post/jieba-wordcloud-python%E5%AE%9E%E7%8E%B0%E4%B8%AD%E6%96%87%E8%AF%8D%E4%BA%91%E7%BB%98%E5%88%B6/</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/jieba-wordcloud-python%E5%AE%9E%E7%8E%B0%E4%B8%AD%E6%96%87%E8%AF%8D%E4%BA%91%E7%BB%98%E5%88%B6/</guid>
      <description>首先是安装教程：
 https://pypi.org/
点击这个链接分别下载自己对应版本的wordcloud和jieba的包
wordcloud:
 下载成功以后应该是一个 .whl 文件，需要命令行进行操作安装：
为了操作简便，可以把.whl 文件拖到d盘根目录下
在路径直接输入cmd，进入命令窗口，输入pip install 文件名字（这里输入你刚才的.whl文件全名） 
   另外不少人会有pip更新版本有误的现象：NO MODULE NAME
解决方法：
在命令行首先执行
python -m ensurepip
然后执行
python -m pip install --upgrade pip
    jieba:
 把你下载好的压缩包打开把jieba 这一文件夹放置在python安装目录下的site-packages文件夹下就可以了：
  然后是代码环节了,依然是废话不多说,直接上代码：
import imageioimport jiebaimport matplotlib.pyplot as pltimport numpy as npfrom PIL import Imagefrom wordcloud import WordCloudfile_path = &#39;日报.txt&#39;background_image = np.array(Image.open(&#39;img_2.png&#39;))with open(file_path, &#39;r&#39;, encoding=&#39;utf-8&#39;) as f: # 读取文件essay = f.</description>
    </item>
    
    <item>
      <title>如何用Turtle库画出一坨粑粑</title>
      <link>https://zc6666.top/post/%E7%94%A8turtle-%E5%BA%93%E4%BC%98%E9%9B%85%E5%9C%B0%E7%94%BB%E5%87%BA%E4%B8%80%E5%9D%A8%E7%B2%91%E7%B2%91/</link>
      <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/%E7%94%A8turtle-%E5%BA%93%E4%BC%98%E9%9B%85%E5%9C%B0%E7%94%BB%E5%87%BA%E4%B8%80%E5%9D%A8%E7%B2%91%E7%B2%91/</guid>
      <description>这篇文章教你如何用Turtle库画出一坨粑粑 首先，你需要的工具有：Pycharm(集成环境&amp;amp;编译器),Phython 3.x 废话不多说代码贴图：
import turtle #导入Turtle库turtle.color(&amp;quot;#DAA520&amp;quot;) #填充颜色turtle.begin_fill() #开始填充turtle.pensize(2) #海龟的腰围turtle.pencolor(&amp;quot;#FFCC00&amp;quot;) #海龟路径的颜色turtle.penup() #海龟飞起，不留痕迹turtle.fd(-50) #海龟向左移动50单位turtle.pendown() #海龟落下，开始痕迹turtle.fd(100) #向右100单位turtle.circle(18,180) #18半径，180度 #以下代码注释省略举一反三turtle.fd(50)turtle.fd(-30)turtle.circle(-15,-180)turtle.fd(-15)turtle.circle(10,140)turtle.fd(20)turtle.circle(1,160)turtle.fd(16)turtle.circle(-1,120)turtle.fd(25)turtle.circle(10,180)turtle.fd(10)turtle.fd(-20)turtle.circle(-15,-180)turtle.fd(-30)turtle.fd(47)turtle.circle(16,152)turtle.pendown()turtle.end_fill() #最后进行包裹区域的填充turtle.done() #海龟全程结束</description>
    </item>
    
    <item>
      <title>Git 的命令行常见使用总结</title>
      <link>https://zc6666.top/post/git%E7%9A%84%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/git%E7%9A%84%E5%B8%B8%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>Git 的常用命令  一、已有一个仓库，想把本地项目push到仓库内该这样做：
 1.在本地仓库目录的cmd内输入以下命令：
 git init 进行初始化本地仓库
git add . 将已有的项目文件全部添加到缓存区
git commit -m &amp;quot;我是注释&amp;quot;提交已有的项目至仓库内，并在引号内添加注释
   2.在云端确认自己的仓库，并复制下SSH或者HTTP方式下的网址,以我的博客为例
 git remote add origin https://github.com/aub123/vocanic.git
PS:两种方式的区别是SSH密钥将密钥放在GITHUB之后可以不用再次验证，而HTTP方式需要每次提交时进行网页手动验证，或者输入密码验证（注：于2021年某月份后HTTP方式登录不再支持）
   3.进行本地至云端的提交
 git push origin master将代码提交到master分支上
此时登录你的github网页应该已经显示你的提交记录了。
    二、从网站克隆（下载）一个仓库，并进行修改
 1.在一个你想存放代码的目录，打开 cmd 输入以下命令对代码进行克隆（下载）(仍然以我博客为例)
 git clone https://github.com/aub123/vocanic.git
对现有仓库下载
git pull https://github.com/aub123/vocanic.git
更新最新代码状态（直接从远程主机拉取代码并进行merge合并操纵）
git fetch https://github.com/aub123/vocanic.git
抓取远程主机代码但是不进行合并，用于需要检验代码情况后进行更新代码的情况
     2.对代码进行修改后，应该这样提交：
 git status 查看你修改的代码文件状态</description>
    </item>
    
    <item>
      <title>正则表达式的总结</title>
      <link>https://zc6666.top/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
      <description>基础语法
 /正则表达式主体/修饰符(可选)
 常见的正则情况
 (?![0-9]+$) 这句意思是设定后面不能为纯数字
(?![a-z]+$) 这句意思是设定后面不能为纯小写字母
(?![0-9a-z]+$) 不能为小写字母与数字
(?![0-9A-Z]+$) 不能为大写字母与数字
(?![0-9a-zA-Z]+$) 不能为大写，小写字母与数字
 实例
 必须包含数字、英文字母、特殊符号且大于等于8位
特殊符号包括: ~!@#$%^&amp;amp;*
*正则表达式如下:*
&amp;lt;/^(?=.*\d)(?=.*[a-zA-Z])(?=.*[~!@#$%^&amp;amp;*])[\da-zA-Z~!@#$%^&amp;amp;*]{8,}$/&amp;gt; 
(?=.**[a-z]+$) 在字符某一位置存在a-z的字符
{8.16}$ 规定密码长度在8-16位
 之前改上网认证正则写过一个实例
 function pswTest() { //对密码强度进行验证，大小写字母，特殊字符，数字，四选三，在8位数以上var psw = document.getElementsByName(&amp;quot;password&amp;quot;)[0].value; var testPassword = /^(?![a-zA-Z]+$)(?![A-Z0-9]+$)(?![A-Z\W_]+$)(?![a-z0-9]+$)(?![a-z\W_]+$)(?![0-9\W_]+$)[a-zA-Z0-9\W_]{8,}$/; if (testPassword.test(psw) === false){ alert(&amp;quot;修改密码后再尝试登录&amp;quot;); return false; }else return true; //函数返回的是一个布尔值，需要在JS主体对返回值进行判断 //然后进行相关操作}    正则看起来很乱，但其实还是有规律可循的。
最重要的还是在写代码之前把自己的逻辑理清楚，核心思想就是排列组合的穷举方法，把该判断的情况都列出来。
最后加上一些主体函数的操作就能实现正则的验证。</description>
    </item>
    
    <item>
      <title>My Personal Introduction</title>
      <link>https://zc6666.top/post/introduction/</link>
      <pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/introduction/</guid>
      <description>火山 vocanic   studys in the Computer School of HDU,
  is one of the REDHOME members and also the Deputy director of the Office in HDU sports club.
  loves singing and watching movies, is optimistic, outgoing and always ready to make new friends.
  welcome to be my parter to make progress in life and study!
 My Github Link
  QQ NUMBER: 2546319206</description>
    </item>
    
    <item>
      <title>为什么想到要建一个博客</title>
      <link>https://zc6666.top/post/reflectionreason/</link>
      <pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/reflectionreason/</guid>
      <description>The reason why I wanna establish the blog is mostly that several days ago, I saw many of my classmates having owned their blog. And due to the feeling of admiration, I built my first blog as the notes for my study and the experiences I had or will have this afternoon . It is also a reason that I wanna improve my English level, so that I would write blogs in English in the most cases.</description>
    </item>
    
  </channel>
</rss>
