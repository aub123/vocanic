<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JS on Vocanic myBlogger</title>
    <link>https://zc6666.top/categories/js/</link>
    <description>Recent content in JS on Vocanic myBlogger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2011-2020 Fabian Tamp</copyright>
    <lastBuildDate>Sun, 22 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zc6666.top/categories/js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深拷贝与浅拷贝详解</title>
      <link>https://zc6666.top/post/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</guid>
      <description>十分钟从0到1掌握深浅拷贝 引入 在做算法题或者在写业务时，难免会碰到二维数组的创建和使用。在刚学习JS的时候，笔者使用二维数组就遇到了百思不得其解的问题 刚学习JS时我是这样做的
const arr = new Array(3).fill(new Array(3).fill(0)) console.log(arr)  &amp;lt;button id=&amp;ldquo;rundata&amp;rdquo; οnclick=&amp;ldquo;rundata()&amp;quot;&amp;gt;RUN
 function rundata(){//获取输入框内的数据var text = document.getElementById(&#39;inputdata&#39;).value;// 先清空iframevar iframe = document.getElementById(&#34;iframe1&#34;).contentWindow.document.body.innerText = &#34;&#34;;//将输入框内的数据传给iframeiframe = document.getElementById(&#39;iframe1&#39;).contentDocument.write(text);}  </description>
    </item>
    
    <item>
      <title>JS中的函数声明整体和变量声明提升</title>
      <link>https://zc6666.top/post/js%E9%A2%84%E7%BC%96%E8%AF%91/</link>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/js%E9%A2%84%E7%BC%96%E8%AF%91/</guid>
      <description>#JS中的变量声明提升和函数声明整体提升#
JS算是学习前端的小萌新们必须要走的一项难关，其中变量和函数提升是JS中很别具一格的特点。由于JS 的预编译特性，所以函数和变量的编译顺序发生了一丢丢和视图不一样的改变。下面让我们一起来学习一下：
首先记住一个宗旨：函数声明会整体提升；变量则是声明提升
一、先看变量的提升：
 1.当我们写一段如下的代码时：
 	var a = 3; document.write(a);   根据我们之前所学的知识，我们很容易知道会输出一个：
  	3  2.当代码删去对a的声明时，变成如下时候：
 	document.write(a);  我们会得到一个ERROR的结果
   上面两种情况都是很基础的内容：
 第一种因为上面对a有了定义声明并赋值，所以下面可以打印出来；
第二种因为之前没有对a的定义声明，所以出现了未定义的变量从而出现错误。
   3.下面让我们看第三种情况：
 	document.write(a);	var a = 3;  我们此时惊奇地发现:
   打印的操作并未出现错误，但是a的值也并未传到页面中。这又是为什么呢？
其实，是变量的声明发生了提升，你可以理解为，将a的定义提前了：
 	var a;document.write(a);a = 3; 进行了如上的操作。以上就是变量提升的说明啦！
 二、函数声明整体提升：
 我们可以看到：虽然我们的函数在执行语句的后面，但是函数依旧被执行，并没有报错。
这是因为在HTML加载时，&amp;lt; script&amp;gt; 中的function(也就是我们的函数)，会被整体提升到开头先进行加载，加载完毕后，再进行其他语句(如执行语句)的进行。 以上就是我对函数声明整体提升和变量声明提升的解释说明了。</description>
    </item>
    
    <item>
      <title>正则表达式的总结</title>
      <link>https://zc6666.top/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zc6666.top/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93/</guid>
      <description>基础语法
 /正则表达式主体/修饰符(可选)
 常见的正则情况
 (?![0-9]+$) 这句意思是设定后面不能为纯数字
(?![a-z]+$) 这句意思是设定后面不能为纯小写字母
(?![0-9a-z]+$) 不能为小写字母与数字
(?![0-9A-Z]+$) 不能为大写字母与数字
(?![0-9a-zA-Z]+$) 不能为大写，小写字母与数字
 实例
 必须包含数字、英文字母、特殊符号且大于等于8位
特殊符号包括: ~!@#$%^&amp;amp;*
*正则表达式如下:*
&amp;lt;/^(?=.*\d)(?=.*[a-zA-Z])(?=.*[~!@#$%^&amp;amp;*])[\da-zA-Z~!@#$%^&amp;amp;*]{8,}$/&amp;gt; 
(?=.**[a-z]+$) 在字符某一位置存在a-z的字符
{8.16}$ 规定密码长度在8-16位
 之前改上网认证正则写过一个实例
 function pswTest() { //对密码强度进行验证，大小写字母，特殊字符，数字，四选三，在8位数以上var psw = document.getElementsByName(&amp;quot;password&amp;quot;)[0].value; var testPassword = /^(?![a-zA-Z]+$)(?![A-Z0-9]+$)(?![A-Z\W_]+$)(?![a-z0-9]+$)(?![a-z\W_]+$)(?![0-9\W_]+$)[a-zA-Z0-9\W_]{8,}$/; if (testPassword.test(psw) === false){ alert(&amp;quot;修改密码后再尝试登录&amp;quot;); return false; }else return true; //函数返回的是一个布尔值，需要在JS主体对返回值进行判断 //然后进行相关操作}    正则看起来很乱，但其实还是有规律可循的。
最重要的还是在写代码之前把自己的逻辑理清楚，核心思想就是排列组合的穷举方法，把该判断的情况都列出来。
最后加上一些主体函数的操作就能实现正则的验证。</description>
    </item>
    
  </channel>
</rss>
